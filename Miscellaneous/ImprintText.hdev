<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.2.0">
<procedure name="main">
<interface/>
<body>
<l>ToolName := 'Imprint Text on Image'</l>
<c></c>
<l>InputText_String := 'Example'</l>
<l>InputNumber_Real := 10.000</l>
<c></c>
<l>Imprint_Enum_Values := ['text', 'number']</l>
<l>Imprint_Enum := ['text']</l>
<c></c>
<l>HeightPosition_Real := 0.1</l>
<l>WidthPosition_Real := 0.1</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="HalconRun">
<interface>
<io>
<par name="InputImage_Img" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="OutputImage_Img" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Imprint_Enum" base_type="ctrl" dimension="0"/>
<par name="InputText_String" base_type="ctrl" dimension="0"/>
<par name="InputNumber_Real" base_type="ctrl" dimension="0"/>
<par name="HeightPosition_Real" base_type="ctrl" dimension="0"/>
<par name="WidthPosition_Real" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>if (Imprint_Enum[1] == 'text')</l>
<l>    PaintText (InputImage_Img, OutputImage_Img, InputText_String, HeightPosition_Real, WidthPosition_Real)</l>
<l>else</l>
<l>    PaintText (InputImage_Img, OutputImage_Img, InputNumber_Real, HeightPosition_Real, WidthPosition_Real)</l>
<l>endif</l>
<c></c>
<l>return ()</l>
</body>
<docu id="HalconRun">
<parameters>
<parameter id="HeightPosition_Real"/>
<parameter id="Imprint_Enum"/>
<parameter id="InputImage_Img"/>
<parameter id="InputNumber_Real"/>
<parameter id="InputText_String"/>
<parameter id="OutputImage_Img"/>
<parameter id="WidthPosition_Real"/>
</parameters>
</docu>
</procedure>
<procedure name="HalconInit">
<interface/>
<body>
<l>global def object FontRegion</l>
<l>global def tuple _Char</l>
<l>global def tuple _Row</l>
<l>global def tuple _Col</l>
<c></c>
<l>Row := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40]</l>
<l>Beg := [1, 5, 11, 15, 20, 25, 31, 35, 38, 41, 48, 50, 53, 55, 60, 63, 65, 68, 0, 3, 5, 8, 10, 13, 15, 18, 20, 25, 30, 35, 38, 41, 48, 50, 52, 55, 60, 65, 68, 0, 5, 10, 15, 18, 20, 25, 30, 32, 35, 41, 48, 50, 55, 60, 63, 65, 67, 0, 3, 5, 8, 10, 13, 15, 18, 20, 25, 30, 33, 35, 38, 41, 45, 48, 50, 52, 55, 60, 63, 65, 68, 0, 3, 5, 11, 15, 20, 25, 31, 35, 38, 41, 46, 50, 53, 55, 60, 63, 65, 68, 1, 5, 11, 15, 21, 25, 30, 33, 35, 37, 40, 43, 45, 48, 50, 52, 55, 61, 65, 0, 3, 5, 8, 10, 13, 15, 18, 20, 26, 30, 33, 35, 37, 40, 43, 45, 48, 50, 52, 58, 60, 63, 65, 68, 0, 3, 5, 10, 13, 15, 21, 26, 30, 33, 35, 37, 40, 43, 46, 51, 56, 60, 65, 0, 3, 5, 10, 12, 15, 17, 23, 26, 30, 33, 35, 37, 40, 45, 48, 51, 55, 60, 63, 65, 68, 1, 5, 11, 15, 18, 20, 26, 31, 36, 40, 43, 45, 48, 51, 55, 60, 63, 65, 1, 5, 10, 15, 21, 25, 28, 31, 38, 40, 43, 45, 50, 53, 55, 58, 61, 65, 0, 3, 5, 8, 10, 15, 20, 25, 28, 31, 38, 40, 42, 45, 50, 55, 58, 60, 63, 65, 68, 0, 5, 8, 10, 15, 20, 22, 25, 31, 38, 40, 45, 50, 53, 55, 57, 60, 63, 65, 0, 3, 5, 8, 10, 15, 20, 23, 25, 28, 31, 35, 38, 40, 42, 45, 50, 53, 55, 58, 60, 63, 65, 1, 5, 10, 15, 21, 25, 28, 31, 36, 40, 43, 45, 50, 53, 55, 58, 61, 65, 1, 5, 11, 15, 20, 23, 25, 27, 30, 33, 35, 38, 40, 42, 45, 51, 57, 61, 65, 0, 3, 5, 8, 10, 16, 20, 23, 25, 27, 30, 33, 35, 38, 40, 42, 48, 50, 52, 56, 60, 63, 68, 0, 3, 5, 11, 16, 20, 23, 25, 27, 30, 33, 36, 41, 46, 50, 53, 57, 62, 66, 0, 2, 5, 7, 13, 16, 20, 23, 25, 27, 30, 35, 38, 41, 45, 50, 53, 57, 61, 68, 1, 5, 8, 10, 16, 21, 26, 30, 33, 35, 38, 41, 45, 51, 57, 60, 65, 0, 3, 5, 11, 15, 21, 26, 40, 42, 46, 50, 56, 61, 0, 3, 5, 10, 18, 20, 23, 25, 28, 40, 42, 46, 52, 56, 60, 63, 0, 5, 10, 17, 21, 26, 51, 56, 60, 62, 3, 8, 10, 13, 17, 20, 23, 28, 36, 60, 3, 5, 11, 17, 21, 26, 31, 35, 51, 56, 61, 65, 0, 3, 5, 7, 11, 15, 21, 27, 31, 47, 62, 1, 5, 10, 12, 18, 20, 22, 26, 32, 36, 47, 51, 56, 61, 65, 0, 5, 7, 11, 16, 21, 26, 32, 35, 40, 46, 60, 1, 5, 11, 13, 15, 20, 22, 26, 32, 36, 45, 51, 56, 61, 65, 0, 3, 5, 7, 10, 17, 21, 23, 27, 31, 45, 56, 62, 0, 6, 10, 16, 21, 26, 31, 36, 40, 1, 6, 10, 17, 20, 22, 27, 31, 36, 41, 46, 48, 2, 6, 11, 17, 30, 41, 45, 47, 1, 6, 12, 17, 31, 36, 41, 0, 6, 12, 16, 31, 36, 40]</l>
<l>End := [2, 7, 12, 17, 23, 28, 32, 35, 38, 41, 48, 50, 53, 55, 60, 63, 65, 68, 0, 3, 5, 8, 10, 13, 15, 18, 20, 25, 30, 35, 38, 41, 48, 50, 52, 55, 63, 66, 68, 3, 7, 10, 15, 18, 22, 27, 30, 33, 38, 41, 48, 51, 55, 60, 63, 65, 68, 0, 3, 5, 8, 10, 13, 15, 18, 20, 25, 30, 33, 35, 38, 41, 45, 48, 50, 52, 55, 60, 63, 65, 68, 0, 3, 7, 12, 17, 23, 25, 32, 35, 38, 41, 47, 50, 53, 58, 60, 63, 65, 68, 2, 7, 12, 17, 23, 27, 30, 33, 35, 37, 40, 43, 45, 48, 50, 52, 58, 62, 67, 0, 3, 5, 8, 10, 13, 15, 18, 20, 26, 30, 33, 35, 37, 40, 43, 45, 48, 50, 52, 58, 60, 63, 65, 68, 0, 3, 7, 10, 13, 17, 22, 26, 30, 33, 35, 37, 40, 43, 47, 51, 57, 63, 67, 0, 3, 5, 10, 13, 15, 17, 23, 26, 30, 33, 35, 37, 43, 45, 48, 51, 55, 60, 63, 65, 68, 2, 5, 13, 15, 18, 22, 26, 32, 36, 40, 43, 45, 48, 51, 58, 60, 63, 67, 2, 7, 13, 18, 22, 25, 28, 31, 38, 40, 43, 45, 50, 53, 55, 58, 62, 67, 0, 3, 5, 8, 10, 15, 20, 25, 28, 31, 38, 40, 42, 45, 53, 56, 58, 60, 63, 65, 68, 0, 5, 8, 12, 17, 20, 23, 28, 31, 38, 41, 45, 50, 53, 55, 58, 60, 63, 67, 0, 3, 5, 8, 10, 15, 20, 23, 25, 28, 31, 35, 38, 40, 42, 45, 50, 53, 55, 58, 60, 63, 65, 2, 7, 13, 15, 22, 25, 28, 31, 37, 40, 43, 48, 50, 53, 55, 58, 62, 65, 2, 7, 13, 17, 20, 23, 25, 27, 30, 33, 35, 38, 40, 42, 48, 52, 57, 62, 67, 0, 3, 5, 8, 10, 16, 20, 23, 25, 27, 30, 33, 35, 38, 40, 42, 48, 50, 53, 57, 60, 63, 68, 0, 3, 7, 12, 16, 20, 23, 25, 27, 30, 33, 37, 41, 47, 51, 53, 57, 62, 67, 0, 3, 5, 7, 13, 16, 20, 23, 25, 27, 33, 35, 38, 41, 45, 50, 53, 57, 61, 68, 3, 5, 8, 12, 16, 22, 26, 30, 33, 35, 38, 41, 48, 52, 57, 63, 67, 0, 3, 8, 12, 18, 22, 27, 40, 42, 46, 51, 56, 62, 0, 3, 5, 10, 18, 20, 23, 25, 28, 40, 42, 46, 52, 56, 60, 63, 3, 7, 12, 17, 22, 28, 51, 56, 60, 63, 3, 8, 10, 13, 17, 20, 23, 28, 36, 60, 3, 7, 12, 17, 22, 27, 31, 35, 51, 56, 63, 68, 0, 3, 5, 7, 13, 16, 21, 27, 31, 47, 62, 2, 8, 10, 12, 18, 20, 22, 26, 32, 36, 47, 51, 56, 61, 67, 3, 5, 7, 12, 17, 21, 26, 32, 37, 42, 46, 60, 2, 8, 11, 13, 15, 20, 22, 26, 32, 36, 45, 51, 56, 61, 67, 0, 3, 5, 7, 12, 18, 21, 23, 27, 31, 45, 56, 62, 0, 7, 10, 17, 21, 26, 32, 36, 41, 1, 6, 10, 17, 20, 22, 27, 31, 36, 41, 46, 48, 2, 6, 11, 17, 31, 42, 45, 47, 1, 6, 12, 17, 31, 36, 41, 0, 7, 12, 17, 32, 36, 41]</l>
<c></c>
<l>gen_region_runs(FontRegion, Row, Beg, End)</l>
<c></c>
<l>_Char := ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N']</l>
<l>_Row  := [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0]</l>
<l>_Col  := [  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13]</l>
<c></c>
<l>_Char := [_Char, 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']</l>
<l>_Row :=  [_Row ,  1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,    1]</l>
<l>_Col  := [_Col,   0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,   11]</l>
<c></c>
<l>_Char := [_Char, '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']</l>
<l>_Row :=  [_Row ,  3,   3,   3,   3,   4,   4,   4,   4,   4,   4]</l>
<l>_Col  := [_Col,  10,  11,  12,   13,  0,   1,   2,   3,   4,   5]</l>
<c></c>
<l>_Char := [_Char, '.', ',','"','\'', '?', '!', '@', '_']</l>
<l>_Row :=  [_Row ,  4,   4,   4,   4,   4,   4,   4,   4]</l>
<l>_Col  := [_Col,   6,   7,   8,   9,  10,  11,  12,   13]</l>
<c></c>
<l>_Char := [_Char, '*', '#', '$', '%', '&amp;', '(', ')', '+', '/', ':', ';',  '&lt;', '=']</l>
<l>_Row :=  [_Row,    5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,    5,   5]</l>
<l>_Col  := [_Col,    0,   1,   2,   3,   4,   5,   6,   7,   8,   9, 10, 11, 12, 13]</l>
<c></c>
<l>_Char := [_Char, '&gt;', '[','\\', ']', '^', '`', '{', '|', '}', '~']</l>
<l>_Row :=  [_Row,    6,   6,   6,   6,   6,   6,   6,   6,   6,   6]</l>
<l>_Col  := [_Col,    0,   1,   2,   3,   4,   5,   6,   7,   8,   9]</l>
<c></c>
<l>return ()</l>
</body>
<docu id="HalconInit">
<parameters/>
</docu>
</procedure>
<procedure name="GenTextRegion">
<interface>
<oo>
<par name="CharacterRegion" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Lines" base_type="ctrl" dimension="0"/>
<par name="StartRow" base_type="ctrl" dimension="0"/>
<par name="StartCol" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>if (|StartRow| = 0)</l>
<l>    StartRow := 0</l>
<l>endif</l>
<c></c>
<l>if (|StartCol| = 0)</l>
<l>    StartCol := 0</l>
<l>endif</l>
<c></c>
<l>RowOffset := 8</l>
<l>ColOffset := 5</l>
<c></c>
<l>CursorRow := StartRow</l>
<c></c>
<l>gen_empty_region (CharacterRegion)</l>
<c></c>
<l>for LineIndex := 0 to |Lines|-1 by 1</l>
<l>    gen_empty_region (CharLine)</l>
<c></c>
<l>    switch (type(Lines[LineIndex]))</l>
<l>    case 1:</l>
<l>        Lines[LineIndex] := Lines[LineIndex]$'d'</l>
<l>        break</l>
<l>    case 4:</l>
<l>        break</l>
<l>    default:</l>
<l>        Lines[LineIndex] := Lines[LineIndex]$'f'</l>
<l>        break</l>
<l>    endswitch</l>
<c></c>
<l>    CursorCol := StartCol</l>
<c>    </c>
<l>    for CharIndex := 0 to strlen(Lines[LineIndex])-1 by 1</l>
<c></c>
<l>        Char := Lines[LineIndex]{CharIndex}</l>
<l>        if (Char &gt;= 'a' and Char &lt;= 'z')</l>
<l>            Char := chr(ord(Char) - 32)</l>
<l>        endif</l>
<c></c>
<l>        GetCharacterRegion (Character, Char)</l>
<c></c>
<l>        hom_mat2d_identity (HomMat2D)</l>
<l>        hom_mat2d_translate (HomMat2D, RowOffset*CursorRow, ColOffset*CursorCol, HomMat2D)</l>
<l>        affine_trans_region (Character, RegionAffineTrans, HomMat2D, 'constant')</l>
<l>        union2 (CharacterRegion, RegionAffineTrans, CharacterRegion)</l>
<c>        </c>
<l>        CursorCol := CursorCol + 1</l>
<l>    endfor</l>
<c></c>
<l>    CursorRow := CursorRow + 1</l>
<l>endfor</l>
<c></c>
<l>return ()</l>
</body>
<docu id="GenTextRegion">
<parameters>
<parameter id="CharacterRegion"/>
<parameter id="Lines"/>
<parameter id="StartCol"/>
<parameter id="StartRow"/>
</parameters>
</docu>
</procedure>
<procedure name="GetCharacterRegion">
<interface>
<oo>
<par name="CharRegion" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Char" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>global object FontRegion</l>
<l>global tuple _Char</l>
<l>global tuple _Row</l>
<l>global tuple _Col</l>
<c></c>
<l>CharWidth := 4</l>
<l>CharHeight := 5</l>
<c></c>
<l>gen_rectangle1 (Frame, 0, 0, CharHeight-1, CharWidth-1)</l>
<c></c>
<l>Index := find_first(_Char, Char)</l>
<c></c>
<l>if (Index &gt; -1)</l>
<l>    hom_mat2d_identity (HomMat2D)</l>
<l>    hom_mat2d_translate (HomMat2D, -(_Row[Index]+0)*(CharHeight+1), -(_Col[Index]+0)*(CharWidth+1), HomMat2D)</l>
<l>    affine_trans_region (FontRegion, _FontRegion, HomMat2D, 'nearest_neighbor')</l>
<l>    intersection (Frame, _FontRegion, CharRegion)</l>
<l>else</l>
<l>    CharRegion := Frame</l>
<l>endif</l>
<c></c>
<l>return ()</l>
</body>
<docu id="GetCharacterRegion">
<parameters>
<parameter id="Char"/>
<parameter id="CharRegion"/>
</parameters>
</docu>
</procedure>
<procedure name="PaintText">
<interface>
<io>
<par name="InputImage" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="OutputImage" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Lines" base_type="ctrl" dimension="0"/>
<par name="HeightPos" base_type="ctrl" dimension="0"/>
<par name="WidthPos" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>get_image_size (InputImage, Width, Height)</l>
<c></c>
<l>GenTextRegion (Region, Lines, 0, 0)</l>
<c></c>
<l>area_center (Region, Area, Row, Column)</l>
<c></c>
<l>hom_mat2d_identity (HomMat2D)</l>
<l>hom_mat2d_translate (HomMat2D, -Row, -Column, HomMat2D)</l>
<l>hom_mat2d_scale (HomMat2D, 3, 3, 0, 0, HomMat2D)</l>
<l>hom_mat2d_translate (HomMat2D, HeightPos*Height, WidthPos*Width, HomMat2D)</l>
<c></c>
<l>affine_trans_region (Region, Region, HomMat2D, 'nearest_neighbor')</l>
<l>paint_region (Region, InputImage, OutputImage, 127, 'fill')</l>
<c></c>
<l>return ()</l>
</body>
<docu id="PaintText">
<parameters>
<parameter id="HeightPos"/>
<parameter id="InputImage"/>
<parameter id="Lines"/>
<parameter id="OutputImage"/>
<parameter id="WidthPos"/>
</parameters>
</docu>
</procedure>
</hdevelop>
