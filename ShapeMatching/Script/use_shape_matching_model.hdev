<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.1.1">
<procedure name="main">
<interface/>
<body>
<l>ToolName:='Use shape model'</l>
<l>InfoString:='Reads scaled and rotated shape model from a file and uses it to find matching shapes'</l>
<c>*press Execute to read the model</c>
<l>HalconCallbacks:=['Read']</l>
<c>*user may defines filename and specific file directory, or leaves it as default</c>
<l>filename_String:='model'</l>
<l>file_directory_String:='-'</l>
<c></c>
<l>output_Region_Color:=[255,0,0]</l>
<c>*input parameters described in use_shape_matching_model_ReadMe.txt</c>
<l>AngleStart_Real:=0</l>
<l>AngleStop_Real:=6.29</l>
<l>ScaleMin_Real:=0.1</l>
<l>ScaleMax_Real:=1</l>
<l>MinScore_Real:=0.5</l>
<l>NumMatches_Int:=0</l>
<l>MaxOverlap_Real:=0.5</l>
<l>SubPixel_Enum_Values:=['none', 'interpolation', 'least_squares', 'least_squares_high', 'least_squares_very_high', 'max_deformation 1', 'max_deformation 2', 'max_deformation 3', 'max_deformation 4', 'max_deformation 5', 'max_deformation 6']</l>
<l>SubPixel_Enum:='least_squares'</l>
<l>NumLevels_MInt_MinMax:=[0,10]</l>
<l>NumLevels_MInt:=0</l>
<l>Greediness_Real:=0.9</l>
<c></c>
<l>pointers_Region_Color:=[0,255,0]</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="HalconRun">
<interface>
<io>
<par name="input_Img" base_type="iconic" dimension="0"/>
<par name="inputAOI_Aoi" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="output_Region" base_type="iconic" dimension="0"/>
<par name="pointer_Region" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="AngleStart_Real" base_type="ctrl" dimension="0"/>
<par name="AngleStop_Real" base_type="ctrl" dimension="0"/>
<par name="ScaleMin_Real" base_type="ctrl" dimension="0"/>
<par name="ScaleMax_Real" base_type="ctrl" dimension="0"/>
<par name="MinScore_Real" base_type="ctrl" dimension="0"/>
<par name="NumMatches_Int" base_type="ctrl" dimension="0"/>
<par name="MaxOverlap_Real" base_type="ctrl" dimension="0"/>
<par name="SubPixel_Enum" base_type="ctrl" dimension="0"/>
<par name="NumLevels_MInt" base_type="ctrl" dimension="0"/>
<par name="Greediness_Real" base_type="ctrl" dimension="0"/>
<par name="ModelID_Tuple" base_type="ctrl" dimension="0"/>
<par name="filename_String" base_type="ctrl" dimension="0"/>
<par name="file_directory_String" base_type="ctrl" dimension="0"/>
<par name="shape_toPrint_Int" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="file_toPrint_String" base_type="ctrl" dimension="0"/>
<par name="number_of_shapes_found_Int" base_type="ctrl" dimension="0"/>
<par name="row_toPrint_Real" base_type="ctrl" dimension="0"/>
<par name="column_toPrint_Real" base_type="ctrl" dimension="0"/>
<par name="angle_toPrint_Real" base_type="ctrl" dimension="0"/>
<par name="scale_toPrint_Real" base_type="ctrl" dimension="0"/>
<par name="score_toPrint_Real" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>*if user doesn't put specific directory, the model is saved in default directory</c>
<c>*as default the  model is saved in 'images' folder on industrial controller</c>
<c>*specific directory works only when using BVS Cockpit installed on PC</c>
<c>*file_toPrint_String shows where the model is saved</c>
<l>if(file_directory_String!='-')</l>
<l>    file_toPrint_String:=file_directory_String+filename_String+'.shm'</l>
<l>else</l>
<l>    file_toPrint_String:='/data/icsServer/share/images/'+filename_String+'.shm'    </l>
<l>endif</l>
<c>*inputAOI_Aoi is searched for shapes</c>
<l>reduce_domain (input_Img, inputAOI_Aoi, ImageReduced)</l>
<l>find_scaled_shape_models (ImageReduced,ModelID_Tuple, AngleStart_Real, AngleStop_Real, ScaleMin_Real, ScaleMax_Real, MinScore_Real, NumMatches_Int, MaxOverlap_Real, SubPixel_Enum[1], NumLevels_MInt, Greediness_Real, Row, Column, Angle, Scale, Score, Model)</l>
<c>*found shapes are pointed with red dots</c>
<l>gen_empty_region (output_Region)</l>
<l>for i := 0 to |Row|-1 by 1</l>
<l>   gen_circle(Circle, Row[i], Column[i], 10*Scale[i])   </l>
<l>   union2 (Circle, output_Region, output_Region)</l>
<l>endfor</l>
<c></c>
<l>number_of_shapes_found_Int:=|Row|</l>
<l>gen_circle (pointer_Region, Row[shape_toPrint_Int], Column[shape_toPrint_Int], 20*Scale[shape_toPrint_Int])</l>
<c></c>
<l>row_toPrint_Real:=Row[shape_toPrint_Int]</l>
<l>column_toPrint_Real:=Column[shape_toPrint_Int]</l>
<l>angle_toPrint_Real:=Angle[shape_toPrint_Int]</l>
<l>scale_toPrint_Real:=Scale[shape_toPrint_Int]</l>
<l>score_toPrint_Real:=Score[shape_toPrint_Int]</l>
<c></c>
<l>return ()</l>
</body>
<docu id="HalconRun">
<parameters>
<parameter id="AngleStart_Real"/>
<parameter id="AngleStop_Real"/>
<parameter id="Greediness_Real"/>
<parameter id="MaxOverlap_Real"/>
<parameter id="MinScore_Real"/>
<parameter id="ModelID_Tuple"/>
<parameter id="NumLevels_MInt"/>
<parameter id="NumMatches_Int"/>
<parameter id="ScaleMax_Real"/>
<parameter id="ScaleMin_Real"/>
<parameter id="SubPixel_Enum"/>
<parameter id="angle_toPrint_Real"/>
<parameter id="column_toPrint_Real"/>
<parameter id="file_directory_String"/>
<parameter id="file_toPrint_String"/>
<parameter id="filename_String"/>
<parameter id="inputAOI_Aoi"/>
<parameter id="input_Img"/>
<parameter id="number_of_shapes_found_Int"/>
<parameter id="output_Region"/>
<parameter id="pointer_Region"/>
<parameter id="row_toPrint_Real"/>
<parameter id="scale_toPrint_Real"/>
<parameter id="score_toPrint_Real"/>
<parameter id="shape_toPrint_Int"/>
</parameters>
</docu>
</procedure>
<procedure name="Read">
<interface>
<ic>
<par name="filename_String" base_type="ctrl" dimension="0"/>
<par name="file_directory_String" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ModelID_Tuple_" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>if(file_directory_String!='-')</l>
<l>    file_dir:=file_directory_String+filename_String+'.shm'</l>
<l>else</l>
<l>    file_dir:='/data/icsServer/share/images/'+filename_String+'.shm'    </l>
<l>endif</l>
<c></c>
<l>read_shape_model (file_dir, ModelID_Tuple_)</l>
<l>return ()</l>
</body>
<docu id="Read">
<parameters>
<parameter id="ModelID_Tuple_"/>
<parameter id="file_directory_String"/>
<parameter id="filename_String"/>
</parameters>
</docu>
</procedure>
<procedure name="HalconInit">
<interface/>
<body>
<l>return ()</l>
</body>
<docu id="HalconInit">
<parameters/>
</docu>
</procedure>
<procedure name="HalconFinalize">
<interface/>
<body>
<c></c>
<c></c>
<l>return ()</l>
</body>
<docu id="HalconFinalize">
<parameters/>
</docu>
</procedure>
</hdevelop>
