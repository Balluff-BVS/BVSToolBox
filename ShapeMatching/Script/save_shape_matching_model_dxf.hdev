<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.1.1">
<procedure name="main">
<interface/>
<body>
<l>ToolName:='Create shape model'</l>
<l>InfoString:='Use contours read from .dxf file to create and save scaled and rotating shape model'</l>
<c></c>
<l>HalconCallbacks:=['ReadContours', 'SaveModel']</l>
<c></c>
<l>filename_contours_String:='metal-part-01'</l>
<l>filepath_contours_String:='-'</l>
<l>filename_model_String:='model'</l>
<l>filepath_model_String:='-'</l>
<c></c>
<l>ModelImage_Scale_Real:=3.38</l>
<l>AngleStart_Real:=0</l>
<l>AngleStop_Real:=6.28</l>
<c></c>
<l>Optimization_Enum_Values:=['auto', 'no_pregeneration', 'none', 'point_reduction_high', 'point_reduction_low', 'point_reduction_medium', 'pregeneration']</l>
<l>Optimization_Enum:='pregeneration'</l>
<c></c>
<l>Metric_Enum_Values:=['ignore_color_polarity', 'ignore_global_polarity', 'ignore_local_polarity', 'use_polarity']</l>
<l>Metric_Enum:='use_polarity'</l>
<c></c>
<l>Contrast_Int:=30</l>
<l>MinContrast_Int:=10</l>
<l>ScaleMin_Real:=0.9</l>
<l>ScaleMax_Real:=1.1</l>
<l>ScaleStep_Real:='auto'</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="HalconRun">
<interface>
<io>
<par name="input_Img" base_type="iconic" dimension="0"/>
<par name="Contours_Object" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Image_Img" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="filename_contours_String" base_type="ctrl" dimension="0"/>
<par name="filepath_contours_String" base_type="ctrl" dimension="0"/>
<par name="filepath_model_String" base_type="ctrl" dimension="0"/>
<par name="filename_model_String" base_type="ctrl" dimension="0"/>
<par name="ModelImage_Scale_Real" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="file_toRead_String" base_type="ctrl" dimension="0"/>
<par name="file_toSave_String" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>get_image_size (input_Img, Width, Height)</l>
<l>gen_model_image_of_bright_object_with_holes (Contours_Object, Image_Img, ModelImage_Scale_Real, Width, Height)    </l>
<c>    </c>
<l>if(filepath_contours_String!='-')</l>
<l>    file_toRead_String := filepath_contours_String+filename_contours_String+'.dxf'</l>
<l>else</l>
<l>    file_toRead_String := '/data/icsServer/share/images/'+filename_contours_String+'.dxf'</l>
<l>endif    </l>
<c></c>
<c></c>
<l>if(filepath_model_String!='-')</l>
<l>    file_toSave_String:=filepath_model_String+filename_model_String+'.dxf'</l>
<l>else</l>
<l>    file_toSave_String:='/data/icsServer/share/images/'+filename_model_String+'.dxf'    </l>
<l>endif</l>
<c></c>
<l>return()</l>
</body>
<docu id="HalconRun">
<parameters>
<parameter id="Contours_Object"/>
<parameter id="Image_Img"/>
<parameter id="ModelImage_Scale_Real"/>
<parameter id="file_toRead_String"/>
<parameter id="file_toSave_String"/>
<parameter id="filename_contours_String"/>
<parameter id="filename_model_String"/>
<parameter id="filepath_contours_String"/>
<parameter id="filepath_model_String"/>
<parameter id="input_Img"/>
</parameters>
</docu>
</procedure>
<procedure name="gen_model_image_of_bright_object_with_holes">
<interface>
<io>
<par name="Contours" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ModelImage" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Scale" base_type="ctrl" dimension="0"/>
<par name="Width" base_type="ctrl" dimension="0"/>
<par name="Height" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>union_adjacent_contours_xld (Contours, Contours, 1, 1, 'attr_keep')</l>
<l>gen_empty_obj (EmptyObject)</l>
<l>difference_closed_contours_xld (Contours, EmptyObject, ContoursClassified)</l>
<l>gen_empty_obj (Boundaries)</l>
<l>gen_empty_obj (Holes)</l>
<l>count_obj (ContoursClassified, Number)</l>
<l>for i := 1 to Number by 1</l>
<l>    select_obj (ContoursClassified, ObjectSelected, i)</l>
<l>    get_contour_global_attrib_xld (ObjectSelected, 'is_hole', IsHole)</l>
<l>    if (IsHole == 1)</l>
<l>        concat_obj (Holes, ObjectSelected, Holes)</l>
<l>    else</l>
<l>        concat_obj (Boundaries, ObjectSelected, Boundaries)</l>
<l>    endif</l>
<l>endfor</l>
<c></c>
<l>hom_mat2d_identity (HomMat2DIdentity)</l>
<l>hom_mat2d_scale (HomMat2DIdentity, Scale, Scale, 0, 0, HomMat2DScale)</l>
<c></c>
<l>affine_trans_contour_xld (Boundaries, BoundariesScaled, HomMat2DScale)</l>
<l>area_center_xld (BoundariesScaled, Area, RowScaled, ColScaled, PointOrder)</l>
<l>hom_mat2d_translate (HomMat2DScale, Height / 2 - mean(RowScaled), Width / 2 - mean(ColScaled), HomMat2D)</l>
<l>affine_trans_contour_xld (Boundaries, BoundariesCenteredAndScaled, HomMat2D)</l>
<l>affine_trans_contour_xld (Holes, HolesCenteredAndScaled, HomMat2D)</l>
<c></c>
<l>gen_image_const (ModelImage, 'byte', Width, Height)</l>
<l>count_obj (BoundariesCenteredAndScaled, NumberBoundaries)</l>
<l>for i := 1 to NumberBoundaries by 1</l>
<l>    select_obj (BoundariesCenteredAndScaled, ObjectSelected, i)</l>
<l>    paint_xld (ObjectSelected, ModelImage, ModelImage, 127)</l>
<l>endfor</l>
<l>count_obj (HolesCenteredAndScaled, NumberHoles)</l>
<l>for i := 1 to NumberHoles by 1</l>
<l>    select_obj (HolesCenteredAndScaled, ObjectSelected, i)</l>
<l>    paint_xld (ObjectSelected, ModelImage, ModelImage, 0)</l>
<l>endfor</l>
<l>threshold (ModelImage, Region, 10, 255)</l>
<l>dilation_rectangle1 (Region, RegionDilation, 3, 3)</l>
<l>reduce_domain (ModelImage, RegionDilation, ModelImage)</l>
<l>return ()</l>
</body>
<docu id="gen_model_image_of_bright_object_with_holes">
<short lang="en_US">Create an image of bright object with holes from XLD contours</short>
<parameters>
<parameter id="Contours"/>
<parameter id="Height"/>
<parameter id="ModelImage"/>
<parameter id="Scale"/>
<parameter id="Width"/>
</parameters>
</docu>
</procedure>
<procedure name="ReadContours">
<interface>
<oo>
<par name="Contours_Object_" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="filepath_contours_String" base_type="ctrl" dimension="0"/>
<par name="filename_contours_String" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>if(filepath_contours_String!='-')</l>
<l>    file_contours_String := filepath_contours_String+filename_contours_String+'.dxf'</l>
<l>else</l>
<l>    file_contours_String := '/data/icsServer/share/images/'+filename_contours_String+'.dxf'</l>
<l>endif</l>
<c></c>
<l>read_contour_xld_dxf (Contours_Object_, file_contours_String, [], [], DxfStatus)</l>
<c> </c>
<c></c>
<l>return ()</l>
</body>
<docu id="ReadContours">
<parameters>
<parameter id="Contours_Object_"/>
<parameter id="filename_contours_String"/>
<parameter id="filepath_contours_String"/>
</parameters>
</docu>
</procedure>
<procedure name="SaveModel">
<interface>
<io>
<par name="Image_Img_" base_type="iconic" dimension="0"/>
<par name="input_Img" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="filepath_model_String" base_type="ctrl" dimension="0"/>
<par name="filename_model_String" base_type="ctrl" dimension="0"/>
<par name="ModelImage_Scale_Real" base_type="ctrl" dimension="0"/>
<par name="AngleStart_Real" base_type="ctrl" dimension="0"/>
<par name="AngleStop_Real" base_type="ctrl" dimension="0"/>
<par name="Optimization_Enum" base_type="ctrl" dimension="0"/>
<par name="Metric_Enum" base_type="ctrl" dimension="0"/>
<par name="Contrast_Int" base_type="ctrl" dimension="0"/>
<par name="MinContrast_Int" base_type="ctrl" dimension="0"/>
<par name="ScaleMin_Real" base_type="ctrl" dimension="0"/>
<par name="ScaleMax_Real" base_type="ctrl" dimension="0"/>
<par name="ScaleStep_Real" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>if(filepath_model_String!='-')</l>
<l>    file_model_String:=filepath_model_String+filename_model_String+'.shm'</l>
<l>else</l>
<l>    file_model_String:='/data/icsServer/share/images/'+filename_model_String+'.shm'    </l>
<l>endif</l>
<c></c>
<l>create_scaled_shape_model (Image_Img_, 5, AngleStart_Real, AngleStop_Real, 'auto', ScaleMin_Real, ScaleMax_Real, ScaleStep_Real, Optimization_Enum[1], Metric_Enum[1], Contrast_Int, MinContrast_Int, ModelID)</l>
<l>write_shape_model (ModelID, file_model_String)</l>
<l>get_shape_model_params (ModelID, NumLevels, AngleStart, AngleExtent, AngleStep, ScaleMin, ScaleMax, ScaleStep, Metric, MinContrast)</l>
<c></c>
<l>clear_shape_model (ModelID)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="SaveModel">
<parameters>
<parameter id="AngleStart_Real"/>
<parameter id="AngleStop_Real"/>
<parameter id="Contrast_Int"/>
<parameter id="Image_Img_"/>
<parameter id="Metric_Enum"/>
<parameter id="MinContrast_Int"/>
<parameter id="ModelImage_Scale_Real"/>
<parameter id="Optimization_Enum"/>
<parameter id="ScaleMax_Real"/>
<parameter id="ScaleMin_Real"/>
<parameter id="ScaleStep_Real"/>
<parameter id="filename_model_String"/>
<parameter id="filepath_model_String"/>
<parameter id="input_Img"/>
</parameters>
</docu>
</procedure>
</hdevelop>
