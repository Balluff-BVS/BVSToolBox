<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.1.1">
<procedure name="main">
<interface/>
<body>
<l>ToolName := 'Read barcode'</l>
<l>InfoString := 'Advanced barcode reading'</l>
<c></c>
<l>check_char_Enum_Values:=['absent', 'present', 'preserved']</l>
<l>check_char_Enum:='absent'</l>
<c></c>
<l>composite_code_Enum_Values:=['none', 'CC-A/B']</l>
<l>composite_code_Enum:='none'</l>
<c></c>
<l>majority_voting_Enum_Values:=['false', 'true']</l>
<l>majority_voting_Enum:='false'</l>
<c></c>
<l>start_stop_tolerance_Enum_Values:=['high', 'low']</l>
<l>start_stop_tolerance_Enum:='high'</l>
<c></c>
<l>upce_encodation_Enum_Values:=['ucc-12', 'zero-suppressed']</l>
<l>upce_encodation_Enum:='ucc-12'</l>
<c></c>
<l>merge_scanlines_Enum_Values:=['true', 'false']</l>
<l>merge_scanlines_Enum:='true'</l>
<c></c>
<l>barcode_height_min_MInt_MinMax:=[-1,64]</l>
<l>barcode_height_min_MInt:=-1</l>
<c></c>
<l>element_size_max_MReal_MinMax:=[1,256]</l>
<l>element_size_max_MReal:=8.0</l>
<c></c>
<l>element_size_min_MReal_MinMax:=[1.0,64.0]</l>
<l>element_size_min_MReal:=2.0</l>
<c></c>
<c></c>
<l>meas_thresh_MReal_MinMax:=[0.05, 0.20]</l>
<l>meas_thresh_MReal:=0.05</l>
<c></c>
<l>meas_thresh_abs_MReal_MinMax:=[0.0,10.0]</l>
<l>meas_thresh_abs_MReal:=5.0</l>
<c></c>
<l>orientation_MReal_MinMax:=[-90.0, 90.0]</l>
<l>orientation_MReal:=0.0</l>
<c></c>
<l>contrast_min_Int:=0</l>
<l>min_identical_scanlines_Int:=0</l>
<l>num_scanlines_Int:=0</l>
<l>stop_after_result_num_Int:=0</l>
<l>min_code_length_Int:=0</l>
<l>barcode_width_min_Int:=-1</l>
<c></c>
<l>pointers_Region_Color:=[255,0,0]</l>
<l>code_to_print_Int:=0</l>
<l>code_to_compare_String:='-'</l>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="HalconRun">
<interface>
<io>
<par name="input_Img" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="output_Region" base_type="iconic" dimension="0"/>
<par name="pointers_Region" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="check_char_Enum" base_type="ctrl" dimension="0"/>
<par name="composite_code_Enum" base_type="ctrl" dimension="0"/>
<par name="barcode_height_min_MInt" base_type="ctrl" dimension="0"/>
<par name="barcode_width_min_Int" base_type="ctrl" dimension="0"/>
<par name="element_size_max_MReal" base_type="ctrl" dimension="0"/>
<par name="element_size_min_MReal" base_type="ctrl" dimension="0"/>
<par name="contrast_min_Int" base_type="ctrl" dimension="0"/>
<par name="meas_thresh_MReal" base_type="ctrl" dimension="0"/>
<par name="meas_thresh_abs_MReal" base_type="ctrl" dimension="0"/>
<par name="min_identical_scanlines_Int" base_type="ctrl" dimension="0"/>
<par name="majority_voting_Enum" base_type="ctrl" dimension="0"/>
<par name="num_scanlines_Int" base_type="ctrl" dimension="0"/>
<par name="orientation_MReal" base_type="ctrl" dimension="0"/>
<par name="start_stop_tolerance_Enum" base_type="ctrl" dimension="0"/>
<par name="stop_after_result_num_Int" base_type="ctrl" dimension="0"/>
<par name="upce_encodation_Enum" base_type="ctrl" dimension="0"/>
<par name="min_code_length_Int" base_type="ctrl" dimension="0"/>
<par name="merge_scanlines_Enum" base_type="ctrl" dimension="0"/>
<par name="code_to_print_Int" base_type="ctrl" dimension="0"/>
<par name="code_to_compare_String" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="number_of_codes_found_Int" base_type="ctrl" dimension="0"/>
<par name="check_char_toPrint_String" base_type="ctrl" dimension="0"/>
<par name="composite_code_toPrint_String" base_type="ctrl" dimension="0"/>
<par name="barcode_height_min_toPrint_Int" base_type="ctrl" dimension="0"/>
<par name="barcode_width_min_toPrint_Int" base_type="ctrl" dimension="0"/>
<par name="element_size_max_toPrint_Real" base_type="ctrl" dimension="0"/>
<par name="contrast_min_toPrint_Int" base_type="ctrl" dimension="0"/>
<par name="meas_thresh_toPrint_Real" base_type="ctrl" dimension="0"/>
<par name="meas_thresh_abs_toPrint_Real" base_type="ctrl" dimension="0"/>
<par name="min_identical_scanlines_toPrint_Int" base_type="ctrl" dimension="0"/>
<par name="majority_voting_toPrint_String" base_type="ctrl" dimension="0"/>
<par name="num_scanlines_toPrint_Int" base_type="ctrl" dimension="0"/>
<par name="orientation_toPrint_Real" base_type="ctrl" dimension="0"/>
<par name="orientation_tol_toPrint_Real" base_type="ctrl" dimension="0"/>
<par name="start_stop_tolerance_toPrint_String" base_type="ctrl" dimension="0"/>
<par name="stop_after_result_num_toPrint_Int" base_type="ctrl" dimension="0"/>
<par name="upce_encodation_toPrint_String" base_type="ctrl" dimension="0"/>
<par name="merge_scanlines_toPrint_String" base_type="ctrl" dimension="0"/>
<par name="min_code_length_toPrint_Int" base_type="ctrl" dimension="0"/>
<par name="decoded_data_String" base_type="ctrl" dimension="0"/>
<par name="correctness_String" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
<l>create_bar_code_model ([], [], BarCodeHandle_Object)</l>
<c></c>
<l>set_bar_code_param (BarCodeHandle_Object, 'check_char', check_char_Enum[1])</l>
<l>set_bar_code_param (BarCodeHandle_Object, 'composite_code', composite_code_Enum[1])</l>
<l>set_bar_code_param (BarCodeHandle_Object, 'barcode_height_min', barcode_height_min_MInt)</l>
<l>set_bar_code_param (BarCodeHandle_Object, 'barcode_width_min', barcode_width_min_Int)</l>
<l>set_bar_code_param (BarCodeHandle_Object, 'element_size_max', element_size_max_MReal)</l>
<l>set_bar_code_param (BarCodeHandle_Object, 'element_size_min', element_size_min_MReal)</l>
<l>set_bar_code_param (BarCodeHandle_Object, 'contrast_min', contrast_min_Int)</l>
<l>set_bar_code_param (BarCodeHandle_Object, 'meas_thresh', meas_thresh_MReal)</l>
<l>set_bar_code_param (BarCodeHandle_Object, 'meas_thresh_abs', meas_thresh_abs_MReal)</l>
<l>set_bar_code_param (BarCodeHandle_Object, 'min_identical_scanlines', min_identical_scanlines_Int)</l>
<l>set_bar_code_param (BarCodeHandle_Object, 'majority_voting', majority_voting_Enum[1])</l>
<l>set_bar_code_param (BarCodeHandle_Object, 'num_scanlines', num_scanlines_Int)</l>
<l>set_bar_code_param (BarCodeHandle_Object, 'orientation', orientation_MReal)</l>
<l>set_bar_code_param (BarCodeHandle_Object, 'start_stop_tolerance', start_stop_tolerance_Enum[1])</l>
<l>set_bar_code_param (BarCodeHandle_Object, 'stop_after_result_num', stop_after_result_num_Int)</l>
<l>set_bar_code_param (BarCodeHandle_Object, 'upce_encodation', upce_encodation_Enum[1])</l>
<l>set_bar_code_param (BarCodeHandle_Object, 'min_code_length', min_code_length_Int)</l>
<l>set_bar_code_param (BarCodeHandle_Object, 'merge_scanlines', merge_scanlines_Enum[1])</l>
<c></c>
<l>find_bar_code (input_Img, output_Region, BarCodeHandle_Object, 'auto', decoded)</l>
<l>count_obj (output_Region, number_of_codes_found_Int)</l>
<c>*the barcode with index 'code_to_print' is pointed with red dot</c>
<l>gen_empty_region (pointers_Region)</l>
<l>area_center (output_Region, Area, Row, Column)</l>
<l>gen_circle (pointers_Region, Row[code_to_print_Int], Column[code_to_print_Int], 10)</l>
<c>*checks if the code matched with pointer is the same as given in 'code_to_compare'</c>
<l>decoded_data_String:=decoded[code_to_print_Int]</l>
<l>tuple_equal (code_to_compare_String, decoded_data_String, equal)</l>
<l>correctness_String:='-'</l>
<l>if(equal==1)</l>
<l>    correctness_String:='Code is correct'</l>
<l>else</l>
<l>    correctness_String:='Wrong code'</l>
<l> endif</l>
<c></c>
<c></c>
<l>get_bar_code_param (BarCodeHandle_Object, 'check_char', check_char_toPrint_String)</l>
<l>get_bar_code_param (BarCodeHandle_Object, 'composite_code', composite_code_toPrint_String)</l>
<l>get_bar_code_param (BarCodeHandle_Object, 'barcode_height_min', barcode_height_min_toPrint_Int)</l>
<l>get_bar_code_param (BarCodeHandle_Object, 'barcode_width_min', barcode_width_min_toPrint_Int)</l>
<l>get_bar_code_param (BarCodeHandle_Object, 'element_size_max', element_size_max_toPrint_Real)</l>
<l>get_bar_code_param (BarCodeHandle_Object, 'contrast_min', contrast_min_toPrint_Int)</l>
<l>get_bar_code_param (BarCodeHandle_Object, 'meas_thresh', meas_thresh_toPrint_Real)</l>
<l>get_bar_code_param (BarCodeHandle_Object, 'meas_thresh_abs', meas_thresh_abs_toPrint_Real)</l>
<l>get_bar_code_param (BarCodeHandle_Object, 'min_identical_scanlines', min_identical_scanlines_toPrint_Int)</l>
<l>get_bar_code_param (BarCodeHandle_Object, 'majority_voting', majority_voting_toPrint_String)</l>
<l>get_bar_code_param (BarCodeHandle_Object, 'num_scanlines', num_scanlines_toPrint_Int)</l>
<l>get_bar_code_param (BarCodeHandle_Object, 'orientation', orientation_toPrint_Real)</l>
<l>get_bar_code_param (BarCodeHandle_Object, 'orientation_tol', orientation_tol_toPrint_Real)</l>
<l>get_bar_code_param (BarCodeHandle_Object, 'start_stop_tolerance', start_stop_tolerance_toPrint_String)</l>
<l>get_bar_code_param (BarCodeHandle_Object, 'stop_after_result_num', stop_after_result_num_toPrint_Int)</l>
<l>get_bar_code_param (BarCodeHandle_Object, 'upce_encodation', upce_encodation_toPrint_String)</l>
<l>get_bar_code_param (BarCodeHandle_Object, 'timeout', timeout_toPrint_String)</l>
<l>get_bar_code_param (BarCodeHandle_Object, 'merge_scanlines', merge_scanlines_toPrint_String)</l>
<l>get_bar_code_param (BarCodeHandle_Object, 'min_code_length', min_code_length_toPrint_Int)</l>
<c></c>
<l>clear_bar_code_model (BarCodeHandle_Object)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="HalconRun">
<parameters>
<parameter id="barcode_height_min_MInt"/>
<parameter id="barcode_height_min_toPrint_Int"/>
<parameter id="barcode_width_min_Int"/>
<parameter id="barcode_width_min_toPrint_Int"/>
<parameter id="check_char_Enum"/>
<parameter id="check_char_toPrint_String"/>
<parameter id="code_to_compare_String"/>
<parameter id="code_to_print_Int"/>
<parameter id="composite_code_Enum"/>
<parameter id="composite_code_toPrint_String"/>
<parameter id="contrast_min_Int"/>
<parameter id="contrast_min_toPrint_Int"/>
<parameter id="correctness_String"/>
<parameter id="decoded_data_String"/>
<parameter id="element_size_max_MReal"/>
<parameter id="element_size_max_toPrint_Real"/>
<parameter id="element_size_min_MReal"/>
<parameter id="input_Img"/>
<parameter id="majority_voting_Enum"/>
<parameter id="majority_voting_toPrint_String"/>
<parameter id="meas_thresh_MReal"/>
<parameter id="meas_thresh_abs_MReal"/>
<parameter id="meas_thresh_abs_toPrint_Real"/>
<parameter id="meas_thresh_toPrint_Real"/>
<parameter id="merge_scanlines_Enum"/>
<parameter id="merge_scanlines_toPrint_String"/>
<parameter id="min_code_length_Int"/>
<parameter id="min_code_length_toPrint_Int"/>
<parameter id="min_identical_scanlines_Int"/>
<parameter id="min_identical_scanlines_toPrint_Int"/>
<parameter id="num_scanlines_Int"/>
<parameter id="num_scanlines_toPrint_Int"/>
<parameter id="number_of_codes_found_Int"/>
<parameter id="orientation_MReal"/>
<parameter id="orientation_toPrint_Real"/>
<parameter id="orientation_tol_toPrint_Real"/>
<parameter id="output_Region"/>
<parameter id="pointers_Region"/>
<parameter id="start_stop_tolerance_Enum"/>
<parameter id="start_stop_tolerance_toPrint_String"/>
<parameter id="stop_after_result_num_Int"/>
<parameter id="stop_after_result_num_toPrint_Int"/>
<parameter id="upce_encodation_Enum"/>
<parameter id="upce_encodation_toPrint_String"/>
</parameters>
</docu>
</procedure>
<procedure name="HalconInit">
<interface/>
<body>
<c></c>
<l>return ()</l>
</body>
<docu id="HalconInit">
<parameters/>
</docu>
</procedure>
<procedure name="HalconFinalize">
<interface/>
<body>
<c></c>
<l>return ()</l>
</body>
<docu id="HalconFinalize">
<parameters/>
</docu>
</procedure>
</hdevelop>
