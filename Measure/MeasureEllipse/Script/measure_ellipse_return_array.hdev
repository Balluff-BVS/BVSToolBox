<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.1.1">
<procedure name="main">
<interface/>
<body>
<l>ToolName := 'Measure ellipse'</l>
<l>InfoString := 'Measures elliptic region obtained by Check Blobs'</l>
<c>* currently measured region is matched with red pointer</c>
<l>pointers_Region_Color:=[255,0,0]</l>
<c>*input parameters described in measure_ReadMe.txt</c>
<l>measure_length1_Enum_Values:=['10','20','30']</l>
<l>measue_length1_Enum:='20'</l>
<c></c>
<l>measure_length2_Enum_Values:=['3','5','10']</l>
<l>measure_length2_Enum:='5'</l>
<c></c>
<l>measure_distance_Enum_Values:=['5','15','10','20','30']</l>
<l>measure_distance_Enum:='10'</l>
<c></c>
<l>measure_sigma_MReal_MinMax:=[0.4,10]</l>
<l>measure_sigma_MReal:=1</l>
<c></c>
<l>measure_threshold_MInt_MinMax:=[1,255]</l>
<l>measure_threshold_MInt:=2</l>
<c></c>
<l>measure_transition_Enum_Values:=['all', 'negative', 'positive', 'uniform']</l>
<l>measure_transition_Enum:='all'</l>
<c></c>
<l>min_score_Enum_Values:=['0.5','0.7','0.9']</l>
<l>min_score_Enum:='0.7'</l>
<c></c>
<l>num_instances_MInt_MinMax:=[1,4]</l>
<l>num_instances_MInt:=1</l>
<c></c>
<l>distance_threshold_Enum_Values:=['0','1.0','3.5','5.0']</l>
<l>distance_threshold_Enum:='3.5'</l>
<c></c>
<l>max_num_iterations_Enum_Values:=['-1','10','100','1000']</l>
<l>max_num_iterations_Enum:='-1'</l>
<c></c>
<l>instances_outside_measure_regions_Enum_Values:=['true', 'false']</l>
<l>instances_outside_measure_regions_Enum:='false'</l>
<c>*index of region to measure</c>
<l>ArrayCount:=5</l>
<l>ArrayCount_MinMax:=[1,32]</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="HalconRun">
<interface>
<io>
<par name="image_Img" base_type="iconic" dimension="0"/>
<par name="object_to_measure_Region" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="contours_Contour" base_type="iconic" dimension="0"/>
<par name="contour_measure_Contour" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="measure_length1_Enum" base_type="ctrl" dimension="0"/>
<par name="measure_length2_Enum" base_type="ctrl" dimension="0"/>
<par name="measure_distance_Enum" base_type="ctrl" dimension="0"/>
<par name="measure_sigma_MReal" base_type="ctrl" dimension="0"/>
<par name="measure_threshold_MInt" base_type="ctrl" dimension="0"/>
<par name="measure_transition_Enum" base_type="ctrl" dimension="0"/>
<par name="min_score_Enum" base_type="ctrl" dimension="0"/>
<par name="num_instances_MInt" base_type="ctrl" dimension="0"/>
<par name="distance_threshold_Enum" base_type="ctrl" dimension="0"/>
<par name="max_num_iterations_Enum" base_type="ctrl" dimension="0"/>
<par name="instances_outside_measure_regions_Enum" base_type="ctrl" dimension="0"/>
<par name="ArrayCount" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="center_x_RealArray" base_type="ctrl" dimension="0"/>
<par name="center_y_RealArray" base_type="ctrl" dimension="0"/>
<par name="phi_RealArray" base_type="ctrl" dimension="0"/>
<par name="radius1_RealArray" base_type="ctrl" dimension="0"/>
<par name="radius2_RealArray" base_type="ctrl" dimension="0"/>
<par name="number_of_ellipses_Int" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>if(measure_length1_Enum[1]=='10')</l>
<l>    MeasureLength1:=10</l>
<l>endif</l>
<c></c>
<l>if(measure_length1_Enum[1]=='20')</l>
<l>    MeasureLength1:=20</l>
<l>endif</l>
<c></c>
<l>if(measure_length1_Enum[1]=='30')</l>
<l>    MeasureLength1:=30</l>
<l>endif</l>
<c></c>
<l>if(measure_length2_Enum[1]=='5')</l>
<l>    MeasureLength2:=5</l>
<l>elseif (measure_length2_Enum[1]=='3')</l>
<l>    MeasureLength2:=3</l>
<l>elseif (measure_length2_Enum[1]=='10')</l>
<l>    MeasureLength2:=10</l>
<l>endif</l>
<c></c>
<l>if (measure_distance_Enum[1]=='10')</l>
<l>    MeasureDistance:=10</l>
<l>elseif (measure_distance_Enum[1]=='5')</l>
<l>    MeasureDistance:=5</l>
<l>elseif (measure_distance_Enum[1]=='15')</l>
<l>    MeasureDistance:=15</l>
<l>elseif (measure_distance_Enum[1]=='20')</l>
<l>    MeasureDistance:=20</l>
<l>elseif (measure_distance_Enum[1]=='30')</l>
<l>    MeasureDistance:=30</l>
<l>endif</l>
<c></c>
<l>if(min_score_Enum[1]=='0.7')</l>
<l>    MinScore:=0.7</l>
<l>elseif (min_score_Enum[1]=='0.5')</l>
<l>    MinScore:=0.5</l>
<l>elseif (min_score_Enum[1]=='0.9')</l>
<l>    MinScore:=0.9</l>
<l>endif</l>
<c></c>
<l>if(distance_threshold_Enum[1]=='3.5')</l>
<l>    DistanceThreshold:=3.5</l>
<l>elseif (distance_threshold_Enum[1]=='0')</l>
<l>    DistanceThreshold:=0</l>
<l>elseif (distance_threshold_Enum[1]=='1.0')</l>
<l>    DistanceThreshold:=1</l>
<l>elseif (distance_threshold_Enum[1]=='5.0')</l>
<l>    DistanceThreshold:=5</l>
<l>endif</l>
<c></c>
<l>if(max_num_iterations_Enum[1]=='-1')</l>
<l>    MaxNumIterations:=-1</l>
<l>elseif (max_num_iterations_Enum[1]=='10')</l>
<l>    MaxNumIterations:=10</l>
<l>elseif (max_num_iterations_Enum[1]=='100')</l>
<l>    MaxNumIterations:=100</l>
<l>elseif (max_num_iterations_Enum[1]=='1000')</l>
<l>    MaxNumIterations:=1000</l>
<l>endif</l>
<c></c>
<l>get_image_size (image_Img, Width, Height)</l>
<l>gen_contour_region_xld (object_to_measure_Region, Contours, 'border')</l>
<l>fit_ellipse_contour_xld (Contours, 'fitzgibbon', -1, 0, 0, 200, 3, 2, Row, Column, Phi, Radius1, Radius2, StartPhi, EndPhi, PointOrder)</l>
<c></c>
<l>create_metrology_model (MetrologyHandle)</l>
<l>set_metrology_model_image_size (MetrologyHandle, Width, Height)</l>
<l>add_metrology_object_ellipse_measure (MetrologyHandle, Row, Column, Phi, Radius1, Radius2, MeasureLength1, MeasureLength2, measure_sigma_MReal, measure_threshold_MInt, [], [], Index)</l>
<c></c>
<l>set_metrology_object_param (MetrologyHandle, 'all', 'distance_threshold', DistanceThreshold)</l>
<l>set_metrology_object_param (MetrologyHandle, 'all', 'instances_outside_measure_regions', instances_outside_measure_regions_Enum[1])</l>
<l>set_metrology_object_param (MetrologyHandle, 'all', 'max_num_iterations', MaxNumIterations)</l>
<l>set_metrology_object_param (MetrologyHandle, 'all', 'measure_distance', MeasureDistance)</l>
<l>* set_metrology_object_param (MetrologyHandle, 'all', 'measure_interpolation', 1)</l>
<l>* set_metrology_object_param (MetrologyHandle, 'all', 'measure_select', 1)</l>
<l>set_metrology_object_param (MetrologyHandle, 'all', 'measure_transition', measure_transition_Enum[1])</l>
<l>set_metrology_object_param (MetrologyHandle, 'all', 'min_score', MinScore)</l>
<l>set_metrology_object_param (MetrologyHandle, 'all', 'num_instances', num_instances_MInt)</l>
<l>* set_metrology_object_param (MetrologyHandle, 'all', 'num_measures', 1)</l>
<c></c>
<c></c>
<l>apply_metrology_model (image_Img, MetrologyHandle)</l>
<l>get_metrology_object_measures (contour_measure_Contour, MetrologyHandle, 'all', 'all', Row1, Column1)</l>
<l>get_metrology_object_result_contour (contours_Contour, MetrologyHandle, 'all', 'all', 1.5)</l>
<l>get_metrology_object_result (MetrologyHandle, 'all', 'all', 'result_type', 'all_param', Parameter)</l>
<c></c>
<l>clear_metrology_model (MetrologyHandle)</l>
<c></c>
<l>number_of_ellipses_Int := |Index|</l>
<c></c>
<l>j:=0</l>
<l>for i:=0 to 5*ArrayCount-1 by 5</l>
<l>    center_x_RealArray[j]:=Parameter[i]</l>
<l>    center_y_RealArray[j]:=Parameter[i+1]</l>
<l>    phi_RealArray[j]:=Parameter[i+2]</l>
<l>    radius1_RealArray[j]:=Parameter[i+3]</l>
<l>    radius2_RealArray[j]:=Parameter[i+4]</l>
<l>    j:=j+1</l>
<l>endfor</l>
<c></c>
<l>return ()</l>
</body>
<docu id="HalconRun">
<parameters>
<parameter id="ArrayCount"/>
<parameter id="center_x_RealArray"/>
<parameter id="center_y_RealArray"/>
<parameter id="contour_measure_Contour"/>
<parameter id="contours_Contour"/>
<parameter id="distance_threshold_Enum"/>
<parameter id="image_Img"/>
<parameter id="instances_outside_measure_regions_Enum"/>
<parameter id="max_num_iterations_Enum"/>
<parameter id="measure_distance_Enum"/>
<parameter id="measure_length1_Enum"/>
<parameter id="measure_length2_Enum"/>
<parameter id="measure_sigma_MReal"/>
<parameter id="measure_threshold_MInt"/>
<parameter id="measure_transition_Enum"/>
<parameter id="min_score_Enum"/>
<parameter id="num_instances_MInt"/>
<parameter id="number_of_ellipses_Int"/>
<parameter id="object_to_measure_Region"/>
<parameter id="phi_RealArray"/>
<parameter id="radius1_RealArray"/>
<parameter id="radius2_RealArray"/>
</parameters>
</docu>
</procedure>
</hdevelop>
